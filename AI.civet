// Use a simple AI to estimate how many games are winnable.
// Currently, it doesn't move cards around on the tableau at all, but still wins about 61% of the time.

{ Value } from ./src/Card.civet
Engine from ./src/Engine.civet

// Cartesian product
operator x same(*) <T, U>(lhs: Iterable<T>, rhs: Iterable<U>)
  Array.from (:Generator<[T, U], void> ->
    for a of lhs
      for b of rhs
        yield [a, b]
  )()

function main
  won .= 0
  total := 10000
  for [0...total]
    ++won if new AI().canWin()
  console.log `Win rate: ${100 * won / total}%`

class AI
  engine = new Engine

  // Each entry in this array represents one type of move to attempt. The AI works by repeatedly performing the first
  // successful move until the game is won or no more moves can be performed.
  moveAttempts: ((@: AI) => boolean)[] = [
    // If there's a revealed card, try to move it to the foundation
    ->
      for dir of ['asc', 'desc'] as const
        for pile of [0..1]
          return true if @engine.moveRevealedToFoundation dir, pile
      return false
    // If there's a revealed card that can't be moved to the foundation, play it on the tableau (only legal move)
    -> @engine.moveRevealedToTableau()
    // If there's a card that can be played from the tableau, do so
    ->
      // Grab from the deepest tableau stack first, even if that's a Joker
      // This strategy drastically increases win rate when cards aren't being moved around on the tableau
      filteredTableauIdxs := @engine.board.tableau
        .map (el, i) => [i, el] as tuple
        .filter ([, el]) => el# > 0
        .sort ([, el1], [, el2]) => el2# - el1#
        .map &.0
      for i of filteredTableauIdxs
        for fndPile of [0..1]
          for dir of ['asc', 'desc'] as const
            return true if @engine.moveTableauToFoundation i, dir, fndPile
      return false
    // If there's a non-joker card that can be played from the hand, do so
    ->
      for each { value }, i of @engine.board.hand
        continue if value is Value.Joker
        for dir of ['asc', 'desc'] as const
          for fndPile of [0..1]
            return true if @engine.moveHandToFoundation i, dir, fndPile
      return false
    // If there's a joker in the hand, play that
    ->
      idx := @engine.board.hand.findIndex .value is Value.Joker
      return false unless idx >= 0
      // Play to the shallowest foundation pile -- slightly increases win rate
      founds := (['asc', 'desc'] as const x [0..1])
        .sort (a, b) => @engine.board.foundation[b.0][b.1]# - @engine.board.foundation[a.0][a.1]#
      @engine.moveHandToFoundation idx, ...founds.0
    // Reveal a card
    -> @engine.revealCard()
  ]

  canWin()
    :outer loop
      return true if @engine.hasWon()
      for attempt of @moveAttempts
        if attempt.call @
          continue outer
      return false

main()
