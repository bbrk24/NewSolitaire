export enum Value
  Joker = -1
  Ace = 1
  Two, Three, Four, Five, Six, Seven, Eight, Nine, Ten
  Jack, Queen, King

export enum Suit
  Hearts = '&hearts;'
  Diamonds = '&diams;'
  Spades = '&spades;'
  Clubs = '&clubs;'

export interface CardLike
  readonly suit: Suit
  readonly value: Value

export class Card <: CardLike
  @#htmlMap = new Map<Value, Map<Suit, HTMLElement>>
    for value of [Value.Joker] ++ [Value.Ace..Value.King]
      [value, new Map] as tuple

  get html()
    Card.#htmlMap.get(@value)!.get(@suit)!

  @get allHTMLs(): readonly HTMLElement[]
    Array.from #htmlMap.values(), [...&.values()]
      .flat()

  @(readonly value: Value, readonly suit: Suit)
    // Check document for usage in node scripts
    if document !<? 'undefined' and not @html?
      html := document.createElement 'div'
        ||> .className = 'card'
        ||> .style.color = @color
        ||> .innerHTML = @toString()
      Card.#htmlMap.get(value)!.set suit, html

  @fromJSON(obj: CardLike)
    return obj if obj <? @
    return new @ obj.value, obj.suit

  get color
    switch @suit
      when Suit.Hearts, Suit.Diamonds
        'red'
      when Suit.Spades, Suit.Clubs
        'black'

  toString()
    if @value is Value.Joker
      return '&starf;'
    switch @value
      when Value.Ace
        'A'
      when Value.King
        'K'
      when Value.Queen
        'Q'
      when Value.Jack
        'J'
      else
        @value.toString()
    |> (+ @suit)

export genDeck := =>
  generator := :Generator<Card, void> ->
    for _, suit in Suit as Record<string, Suit>
      for value of [Value.Ace..Value.King]
        yield new Card value, suit
    yield new Card Value.Joker, Suit.Hearts
    yield new Card Value.Joker, Suit.Spades
  return Array.from generator()
