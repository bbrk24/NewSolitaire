export default class WeakArray<T extends object> <: Iterable<T>
  #arr: WeakRef<T>[] = []

  push(obj: T): void
    #arr.push new WeakRef obj

  *[Symbol.iterator](): Generator<T, void>
    i .= 0
    while i < #arr#
      wr := #arr[i]
      if obj? := wr.deref()
        yield obj
        ++i
      else
        #arr.splice i, 1
  
  forEach(cb: (arg: T) => void): void
    for obj of @
      cb obj